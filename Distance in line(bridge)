def requiredMoveLine(p1_state, p2_state):
    lamplighter1, lights1 = p1_state
    lamplighter2, lights2 = p2_state
    light = []
    
    # Convert the lists of lights to sets for faster comparison
    lights1 = set(lights1)
    lights2 = set(lights2)
    
    # Calculate the unique lights
    unique_lights = lights1 ^ lights2
    
    # Calculate the lamps that need more moves(front and back)
    for item in unique_lights:
        if item < min(lamplighter1, lamplighter2) or item > max(lamplighter1, lamplighter2):
            light.append(item)
    
    # Convert the list of light to sets for faster comparison
    light = set(light)            
    
    minlight = maxlight = None
    # Find the min and max unique lamps with more moves
    if light:
        minlight = min(light)
        maxlight = max(light)
    
    # Calculate the distance from lamplighter 1 to lamplighter 2 distance = abs(lamplighter1 - lamplighter2)
    distance = abs(lamplighter1 - lamplighter2)
    
    # Calculate the distance from the lamplighters to the unique lamps that need more moves
    if minlight is not None:
        distance += abs((min(lamplighter1, lamplighter2) - minlight) * 2)
    if maxlight is not None:
        distance += abs((max(lamplighter1, lamplighter2) - maxlight) * 2)
    
    # Clculate the moves to make change in unique lamps
    distance += len(unique_lights)
    
    # Return the distance
    return distance
